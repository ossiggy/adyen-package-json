export declare const createMerchantRequest: {
    companyId: string;
    legalEntityId: string;
    businessLineId: string;
    description: string;
    reference: string;
};
export declare const allowedOrigin: {
    _links: {
        self: {
            href: string;
        };
    };
    domain: string;
    id: string;
};
export declare const createMerchantApiCredentialRequest: {
    roles: string[];
    allowedOrigins: string[];
};
export declare const updateMerchantApiCredentialRequest: {
    active: boolean;
    allowedOrigins: string[];
    description: string;
    roles: string[];
};
export declare const paymentMethodSetupInfo: {
    type: string;
    currencies: string[];
    countries: string[];
};
export declare const updatePaymentMethodInfo: {
    countries: string[];
    currencies: string[];
    enabled: boolean;
};
export declare const payoutSettingsRequest: {
    enabled: boolean;
    enabledFromDate: string;
    transferInstrumentId: string;
};
export declare const updatePayoutSettingsRequest: {
    enabled: boolean;
};
export declare const shippingLocation: {
    name: string;
    address: {
        companyName: string;
        streetAddress: string;
        postalCode: string;
        city: string;
        stateOrProvince: string;
        country: string;
    };
    contact: {
        firstName: string;
        lastName: string;
        phoneNumber: string;
        email: string;
    };
};
export declare const terminalOrderRequest: {
    shippingLocation: string;
    items: {
        id: string;
        name: string;
        quantity: number;
    }[];
};
export declare const logo: {
    data: string;
};
export declare const terminalSettings: {
    wifiProfiles: {
        profiles: ({
            authType: string;
            autoWifi: boolean;
            bssType: string;
            channel: number;
            defaultProfile: boolean;
            eap: string;
            eapCaCert: {
                data: string;
                name: string;
            };
            eapIdentity: string;
            eapIntermediateCert: {
                data: string;
                name: string;
            };
            eapPwd: string;
            hiddenSsid: boolean;
            name: string;
            ssid: string;
            wsec: string;
            psk?: undefined;
        } | {
            authType: string;
            autoWifi: boolean;
            bssType: string;
            channel: number;
            defaultProfile: boolean;
            hiddenSsid: boolean;
            name: string;
            psk: string;
            ssid: string;
            wsec: string;
            eap?: undefined;
            eapCaCert?: undefined;
            eapIdentity?: undefined;
            eapIntermediateCert?: undefined;
            eapPwd?: undefined;
        })[];
        settings: {
            band: string;
            roaming: boolean;
            timeout: number;
        };
    };
};
export declare const createMerchantUserRequest: {
    name: {
        firstName: string;
        lastName: string;
    };
    username: string;
    email: string;
    timeZoneCode: string;
    roles: string[];
    associatedMerchantAccounts: string[];
};
export declare const updateMerchantUserRequest: {
    accountGroups: string[];
    active: boolean;
    email: string;
    name: {
        firstName: string;
        lastName: string;
    };
    roles: string[];
    timeZoneCode: string;
};
export declare const createMerchantWebhookRequest: {
    acceptsExpiredCertificate: boolean;
    acceptsSelfSignedCertificate: boolean;
    acceptsUntrustedRootCertificate: boolean;
    active: boolean;
    additionalSettings: {
        includeEventCodes: string[];
        properties: {
            sample: boolean;
        };
    };
    communicationFormat: string;
    description: string;
    networkType: string;
    password: string;
    populateSoapActionHeader: boolean;
    sslVersion: string;
    type: string;
    url: string;
    username: string;
};
export declare const updateMerchantWebhookRequest: {
    acceptsExpiredCertificate: boolean;
    acceptsSelfSignedCertificate: boolean;
    acceptsUntrustedRootCertificate: boolean;
    active: boolean;
    additionalSettings: {
        includeEventCodes: string[];
        properties: {
            sample: boolean;
        };
    };
    communicationFormat: string;
    description: string;
    networkType: string;
    password: string;
    populateSoapActionHeader: boolean;
    sslVersion: string;
    url: string;
    username: string;
};
export declare const testWebhookRequest: {
    notification: {
        amount: {
            currency: string;
            value: number;
        };
        eventCode: string;
        eventDate: string;
        merchantReference: string;
        paymentMethod: string;
        reason: string;
        success: boolean;
    };
    types: string[];
};

export declare const listMerchantResponse: {
    _links: {
        first: {
            href: string;
        };
        last: {
            href: string;
        };
        next: {
            href: string;
        };
        self: {
            href: string;
        };
    };
    itemsTotal: number;
    pagesTotal: number;
    data: ({
        id: string;
        name: string;
        captureDelay: string;
        defaultShopperInteraction: string;
        status: string;
        shopWebAddress: string;
        merchantCity: string;
        primarySettlementCurrency: string;
        _links: {
            self: {
                href: string;
            };
            apiCredentials: {
                href: string;
            };
            users: {
                href: string;
            };
            webhooks: {
                href: string;
            };
        };
    } | {
        id: string;
        status: string;
        merchantCity: string;
        primarySettlementCurrency: string;
        _links: {
            self: {
                href: string;
            };
            apiCredentials: {
                href: string;
            };
            users: {
                href: string;
            };
            webhooks: {
                href: string;
            };
        };
        name?: undefined;
        captureDelay?: undefined;
        defaultShopperInteraction?: undefined;
        shopWebAddress?: undefined;
    } | {
        id: string;
        name: string;
        captureDelay: string;
        defaultShopperInteraction: string;
        status: string;
        shopWebAddress: string;
        primarySettlementCurrency: string;
        _links: {
            self: {
                href: string;
            };
            apiCredentials: {
                href: string;
            };
            users: {
                href: string;
            };
            webhooks: {
                href: string;
            };
        };
        merchantCity?: undefined;
    })[];
};
export declare const createMerchantResponse: {
    companyId: string;
    legalEntityId: string;
    businessLineId: string;
    description: string;
    reference: string;
    id: string;
};
export declare const merchant: {
    id: string;
    name: string;
    captureDelay: string;
    defaultShopperInteraction: string;
    status: string;
    shopWebAddress: string;
    merchantCity: string;
    primarySettlementCurrency: string;
    _links: {
        self: {
            href: string;
        };
        apiCredentials: {
            href: string;
        };
        users: {
            href: string;
        };
        webhooks: {
            href: string;
        };
    };
};
export declare const requestActivationResponse: {
    companyId: string;
    merchantId: string;
};
export declare const allowedOriginsResponse: {
    data: {
        _links: {
            self: {
                href: string;
            };
        };
        domain: string;
        id: string;
    }[];
};
export declare const allowedOrigin: {
    _links: {
        self: {
            href: string;
        };
    };
    domain: string;
    id: string;
};
export declare const listMerchantApiCredentialsResponse: {
    _links: {
        first: {
            href: string;
        };
        last: {
            href: string;
        };
        next: {
            href: string;
        };
        self: {
            href: string;
        };
    };
    itemsTotal: number;
    pagesTotal: number;
    data: ({
        id: string;
        username: string;
        allowedIpAddresses: never[];
        roles: string[];
        active: boolean;
        _links: {
            self: {
                href: string;
            };
            allowedOrigins: {
                href: string;
            };
            generateApiKey: {
                href: string;
            };
            generateClientKey: {
                href: string;
            };
            merchant: {
                href: string;
            };
        };
        clientKey?: undefined;
        allowedOrigins?: undefined;
    } | {
        id: string;
        username: string;
        clientKey: string;
        allowedIpAddresses: never[];
        roles: string[];
        active: boolean;
        allowedOrigins: {
            id: string;
            domain: string;
            _links: {
                self: {
                    href: string;
                };
            };
        }[];
        _links: {
            self: {
                href: string;
            };
            allowedOrigins: {
                href: string;
            };
            generateApiKey: {
                href: string;
            };
            generateClientKey: {
                href: string;
            };
            merchant: {
                href: string;
            };
        };
    } | {
        id: string;
        username: string;
        clientKey: string;
        allowedIpAddresses: never[];
        roles: string[];
        active: boolean;
        _links: {
            self: {
                href: string;
            };
            allowedOrigins: {
                href: string;
            };
            generateApiKey: {
                href: string;
            };
            generateClientKey: {
                href: string;
            };
            merchant: {
                href: string;
            };
        };
        allowedOrigins?: undefined;
    })[];
};
export declare const createApiCredentialResponse: {
    id: string;
    username: string;
    clientKey: string;
    allowedIpAddresses: never[];
    roles: string[];
    active: boolean;
    allowedOrigins: {
        id: string;
        domain: string;
        _links: {
            self: {
                href: string;
            };
        };
    }[];
    _links: {
        self: {
            href: string;
        };
        allowedOrigins: {
            href: string;
        };
        generateApiKey: {
            href: string;
        };
        generateClientKey: {
            href: string;
        };
        merchant: {
            href: string;
        };
    };
    apiKey: string;
    password: string;
};
export declare const apiCredential: {
    _links: {
        allowedOrigins: {
            href: string;
        };
        company: {
            href: string;
        };
        generateApiKey: {
            href: string;
        };
        generateClientKey: {
            href: string;
        };
        merchant: {
            href: string;
        };
        self: {
            href: string;
        };
    };
    active: boolean;
    allowedIpAddresses: string[];
    allowedOrigins: {
        _links: {
            self: {
                href: string;
            };
        };
        domain: string;
        id: string;
    }[];
    clientKey: string;
    description: string;
    id: string;
    roles: string[];
    username: string;
};
export declare const generateApiKeyResponse: {
    apiKey: string;
};
export declare const generateClientKeyResponse: {
    clientKey: string;
};
export declare const paymentMethodResponse: {
    _links: {
        first: {
            href: string;
        };
        last: {
            href: string;
        };
        next: {
            href: string;
        };
        prev: {
            href: string;
        };
        self: {
            href: string;
        };
    };
    data: {
        applePay: {
            domains: string[];
        };
        bcmc: {
            enableBcmcMobile: boolean;
        };
        businessLineId: string;
        cartesBancaires: {
            siret: string;
        };
        countries: string[];
        currencies: string[];
        enabled: boolean;
        giroPay: {
            supportEmail: string;
        };
        id: string;
        klarna: {
            autoCapture: boolean;
            disputeEmail: string;
            region: string;
            supportEmail: string;
        };
        paypal: {
            directCapture: boolean;
            directSettlement: boolean;
            payerId: string;
            subject: string;
        };
        sofort: {
            currencyCode: string;
            logo: string;
        };
        storeId: string;
        swish: {
            swishNumber: string;
        };
        type: string;
    }[];
    itemsTotal: number;
    pagesTotal: number;
};
export declare const paymentMethod: {
    applePay: {
        domains: string[];
    };
    bcmc: {
        enableBcmcMobile: boolean;
    };
    businessLineId: string;
    cartesBancaires: {
        siret: string;
    };
    countries: string[];
    currencies: string[];
    enabled: boolean;
    giroPay: {
        supportEmail: string;
    };
    id: string;
    klarna: {
        autoCapture: boolean;
        disputeEmail: string;
        region: string;
        supportEmail: string;
    };
    paypal: {
        directCapture: boolean;
        directSettlement: boolean;
        payerId: string;
        subject: string;
    };
    sofort: {
        currencyCode: string;
        logo: string;
    };
    storeId: string;
    swish: {
        swishNumber: string;
    };
    type: string;
};
export declare const payoutSettingsResponse: {
    data: {
        allowed: boolean;
        enabled: boolean;
        enabledFromDate: string;
        id: string;
        priority: string;
        transferInstrumentId: string;
        verificationStatus: string;
    }[];
};
export declare const payoutSettings: {
    allowed: boolean;
    enabled: boolean;
    enabledFromDate: string;
    id: string;
    priority: string;
    transferInstrumentId: string;
    verificationStatus: string;
};
export declare const billingEntitiesResponse: {
    data: {
        id: string;
        name: string;
        taxId: string;
        email: string;
        address: {
            streetAddress: string;
            postalCode: string;
            city: string;
            country: string;
        };
    }[];
};
export declare const shippingLocationsResponse: {
    data: {
        id: string;
        name: string;
        contact: {
            firstName: string;
            lastName: string;
            phoneNumber: string;
            email: string;
        };
        address: {
            streetAddress: string;
            streetAddress2: string;
            postalCode: string;
            city: string;
            country: string;
        };
    }[];
};
export declare const shippingLocation: {
    id: string;
    name: string;
    contact: {
        firstName: string;
        lastName: string;
        phoneNumber: string;
        email: string;
    };
    address: {
        companyName: string;
        streetAddress: string;
        postalCode: string;
        city: string;
        stateOrProvince: string;
    };
};
export declare const terminalModelsResponse: {
    data: {
        id: string;
        name: string;
    }[];
};
export declare const terminalOrdersResponse: {
    data: {
        id: string;
        customerOrderReference: string;
        status: string;
        shippingLocation: {
            id: string;
            name: string;
            contact: {
                firstName: string;
                lastName: string;
                phoneNumber: string;
                email: string;
            };
            address: {
                streetAddress: string;
                streetAddress2: string;
                postalCode: string;
                city: string;
                country: string;
            };
        };
        billingEntity: {
            id: string;
            name: string;
            taxId: string;
            email: string;
            address: {
                streetAddress: string;
                postalCode: string;
                city: string;
                country: string;
            };
        };
        orderDate: string;
        items: {
            id: string;
            name: string;
            quantity: number;
        }[];
    }[];
};
export declare const terminalOrder: {
    id: string;
    customerOrderReference: string;
    status: string;
    shippingLocation: {
        id: string;
        name: string;
        contact: {
            firstName: string;
            lastName: string;
            phoneNumber: string;
            email: string;
        };
        address: {
            streetAddress: string;
            streetAddress2: string;
            postalCode: string;
            city: string;
            country: string;
        };
    };
    billingEntity: {
        id: string;
        name: string;
        taxId: string;
        email: string;
        address: {
            streetAddress: string;
            postalCode: string;
            city: string;
            country: string;
        };
    };
    orderDate: string;
    items: {
        id: string;
        name: string;
        quantity: number;
    }[];
};
export declare const terminalProductsResponse: {
    data: ({
        id: string;
        name: string;
        price: {
            currency: string;
            value: number;
        };
        description?: undefined;
        itemsIncluded?: undefined;
    } | {
        id: string;
        name: string;
        description: string;
        price: {
            currency: string;
            value: number;
        };
        itemsIncluded: string[];
    })[];
};
export declare const logo: {
    data: string;
};
export declare const terminalSettings: {
    cardholderReceipt: {
        headerForAuthorizedReceipt: string;
    };
    gratuities: {
        currency: string;
        usePredefinedTipEntries: boolean;
        predefinedTipEntries: string[];
        allowCustomAmount: boolean;
    }[];
    nexo: {
        nexoEventUrls: string[];
    };
    opi: {
        enablePayAtTable: boolean;
        payAtTableStoreNumber: string;
        payAtTableURL: string;
    };
    receiptOptions: {};
    receiptPrinting: {
        shopperApproved: boolean;
        shopperRefused: boolean;
        shopperCancelled: boolean;
        shopperRefundApproved: boolean;
        shopperRefundRefused: boolean;
        shopperVoid: boolean;
    };
    signature: {
        askSignatureOnScreen: boolean;
        skipSignature: boolean;
        deviceName: string;
    };
    wifiProfiles: {
        profiles: ({
            authType: string;
            autoWifi: boolean;
            bssType: string;
            channel: number;
            defaultProfile: boolean;
            eap: string;
            eapCaCert: {
                data: string;
                name: string;
            };
            eapIdentity: string;
            eapIntermediateCert: {
                data: string;
                name: string;
            };
            eapPwd: string;
            hiddenSsid: boolean;
            name: string;
            ssid: string;
            wsec: string;
            psk?: undefined;
        } | {
            authType: string;
            autoWifi: boolean;
            bssType: string;
            channel: number;
            defaultProfile: boolean;
            hiddenSsid: boolean;
            name: string;
            psk: string;
            ssid: string;
            wsec: string;
            eap?: undefined;
            eapCaCert?: undefined;
            eapIdentity?: undefined;
            eapIntermediateCert?: undefined;
            eapPwd?: undefined;
        })[];
        settings: {
            band: string;
            roaming: boolean;
            timeout: number;
        };
    };
    timeouts: {
        fromActiveToSleep: number;
    };
    hardware: {
        displayMaximumBackLight: number;
    };
};
export declare const listMerchantUsersResponse: {
    _links: {
        first: {
            href: string;
        };
        last: {
            href: string;
        };
        next: {
            href: string;
        };
        prev: {
            href: string;
        };
        self: {
            href: string;
        };
    };
    data: {
        _links: {
            self: {
                href: string;
            };
        };
        accountGroups: string[];
        active: boolean;
        email: string;
        id: string;
        name: {
            firstName: string;
            lastName: string;
        };
        roles: string[];
        timeZoneCode: string;
        username: string;
    }[];
    itemsTotal: number;
    pagesTotal: number;
};
export declare const createUserResponse: {
    id: string;
    name: {
        firstName: string;
        gender: string;
        lastName: string;
    };
    email: string;
    timeZoneCode: string;
    username: string;
    roles: string[];
    active: string;
    _links: {
        self: {
            href: string;
        };
    };
    associatedMerchantAccounts: string[];
};
export declare const user: {
    _links: {
        self: {
            href: string;
        };
    };
    accountGroups: string[];
    active: boolean;
    email: string;
    id: string;
    name: {
        firstName: string;
        lastName: string;
    };
    roles: string[];
    timeZoneCode: string;
    username: string;
};
export declare const listWebhooksResponse: {
    _links: {
        first: {
            href: string;
        };
        last: {
            href: string;
        };
        next: {
            href: string;
        };
        prev: {
            href: string;
        };
        self: {
            href: string;
        };
    };
    accountReference: string;
    data: {
        _links: {
            company: {
                href: string;
            };
            generateHmac: {
                href: string;
            };
            merchant: {
                href: string;
            };
            self: {
                href: string;
            };
            testWebhook: {
                href: string;
            };
        };
        acceptsExpiredCertificate: boolean;
        acceptsSelfSignedCertificate: boolean;
        acceptsUntrustedRootCertificate: boolean;
        accountReference: string;
        active: boolean;
        additionalSettings: {
            excludeEventCodes: string[];
            includeEventCodes: string[];
            properties: {
                sample: boolean;
            };
        };
        certificateAlias: string;
        communicationFormat: string;
        description: string;
        filterMerchantAccountType: string;
        filterMerchantAccounts: string[];
        hasError: boolean;
        hasPassword: boolean;
        hmacKeyCheckValue: string;
        id: string;
        networkType: string;
        populateSoapActionHeader: boolean;
        sslVersion: string;
        type: string;
        url: string;
        username: string;
    }[];
    itemsTotal: number;
    pagesTotal: number;
};
export declare const webhook: {
    _links: {
        company: {
            href: string;
        };
        generateHmac: {
            href: string;
        };
        merchant: {
            href: string;
        };
        self: {
            href: string;
        };
        testWebhook: {
            href: string;
        };
    };
    acceptsExpiredCertificate: boolean;
    acceptsSelfSignedCertificate: boolean;
    acceptsUntrustedRootCertificate: boolean;
    accountReference: string;
    active: boolean;
    additionalSettings: {
        excludeEventCodes: string[];
        includeEventCodes: string[];
        properties: {
            sample: boolean;
        };
    };
    certificateAlias: string;
    communicationFormat: string;
    description: string;
    filterMerchantAccountType: string;
    filterMerchantAccounts: string[];
    hasError: boolean;
    hasPassword: boolean;
    hmacKeyCheckValue: string;
    id: string;
    networkType: string;
    populateSoapActionHeader: boolean;
    sslVersion: string;
    type: string;
    url: string;
    username: string;
};
export declare const generateHmacKeyResponse: {
    hmacKey: string;
};
export declare const testWebhookResponse: {
    data: {
        merchantId: string;
        output: string;
        requestSent: string;
        responseCode: string;
        responseTime: string;
        status: string;
    }[];
};

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nock_1 = __importDefault(require("nock"));
const client_1 = __importDefault(require("../client"));
const base_1 = require("../__mocks__/base");
const terminalManagement_1 = __importDefault(require("../services/terminalManagement"));
let client;
let terminalManagement;
let scope;
beforeEach(() => {
    if (!nock_1.default.isActive()) {
        nock_1.default.activate();
    }
    client = (0, base_1.createClient)();
    scope = (0, nock_1.default)(`${client.config.terminalManagementEndpoint}/${client_1.default.TERMINAL_MANAGEMENT_API_VERSION}`);
    terminalManagement = new terminalManagement_1.default(client);
});
afterEach(() => {
    nock_1.default.cleanAll();
});
describe("POS Terminal Management API", () => {
    test("Should support /assignTerminals", async () => {
        scope.post("/assignTerminals")
            .reply(200, {
            "results": {
                "P400Plus-275479597": "RemoveConfigScheduled"
            }
        });
        const request = {
            "companyAccount": "YOUR_COMPANY_ACCOUNT",
            "terminals": [
                "P400Plus-275479597"
            ]
        };
        const response = await terminalManagement.assignTerminals(request);
        expect(response.results["P400Plus-275479597"]).toEqual("RemoveConfigScheduled");
    });
    test("Should support /findTerminal", async () => {
        scope.post("/findTerminal")
            .reply(200, {
            "companyAccount": "YOUR_COMPANY_ACCOUNT",
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT",
            "merchantInventory": false,
            "terminal": "P400Plus-275479597"
        });
        const request = {
            "terminal": "P400Plus-275479597"
        };
        const response = await terminalManagement.findTerminal(request);
        expect(response.terminal).toEqual("P400Plus-275479597");
    });
    test("Should support /getStoresUnderAccount", async () => {
        var _a;
        scope.post("/getStoresUnderAccount")
            .reply(200, {
            "stores": [
                {
                    "store": "YOUR_STORE",
                    "description": "YOUR_STORE",
                    "address": {
                        "city": "The City",
                        "countryCode": "NL",
                        "postalCode": "1234",
                        "streetAddress": "The Street"
                    },
                    "status": "Active",
                    "merchantAccountCode": "YOUR_MERCHANT_ACCOUNT"
                }
            ]
        });
        const request = {
            "companyAccount": "YOUR_COMPANY_ACCOUNT"
        };
        const response = await terminalManagement.getStoresUnderAccount(request);
        expect(response.stores).toHaveLength(1);
        expect(response.stores[0].status).toEqual("Active");
        expect((_a = response.stores[0].address) === null || _a === void 0 ? void 0 : _a.countryCode).toEqual("NL");
    });
    test("Should support /getTerminalDetails", async () => {
        scope.post("/getTerminalDetails")
            .reply(200, {
            "companyAccount": "YOUR_COMPANY_ACCOUNT",
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT",
            "merchantInventory": false,
            "terminal": "P400Plus-275479597",
            "deviceModel": "P400Plus",
            "serialNumber": "275-479-597",
            "permanentTerminalId": "75479597",
            "terminalStatus": "ReAssignToInventoryPending",
            "firmwareVersion": "Verifone_VOS 1.57.6",
            "country": "NETHERLANDS",
            "dhcpEnabled": false
        });
        const request = {
            "terminal": "P400Plus-275479597"
        };
        const response = await terminalManagement.getTerminalDetails(request);
        expect(response.deviceModel).toBe("P400Plus");
    });
    test("Should support /getTerminalsUnderAccount", async () => {
        scope.post("/getTerminalsUnderAccount")
            .reply(200, {
            "companyAccount": "YOUR_COMPANY_ACCOUNT",
            "merchantAccounts": [
                {
                    "merchantAccount": "YOUR_MERCHANT_ACCOUNT",
                    "inStoreTerminals": [
                        "P400Plus-275479597"
                    ],
                    "stores": [
                        {
                            "store": "YOUR_STORE",
                            "inStoreTerminals": [
                                "M400-401972715"
                            ]
                        }
                    ]
                }
            ]
        });
        const request = {
            "companyAccount": "YOUR_COMPANY_ACCOUNT"
        };
        const response = await terminalManagement.getTerminalsUnderAccount(request);
        expect(response.merchantAccounts).toHaveLength(1);
        expect(response.merchantAccounts[0].stores).toHaveLength(1);
        expect(response.merchantAccounts[0].stores[0].inStoreTerminals).toEqual(["M400-401972715"]);
    });
});
//# sourceMappingURL=terminalManagement.spec.js.map
"use strict";
/*
 *                       ######
 *                       ######
 * ############    ####( ######  #####. ######  ############   ############
 * #############  #####( ######  #####. ######  #############  #############
 *        ######  #####( ######  #####. ######  #####  ######  #####  ######
 * ###### ######  #####( ######  #####. ######  #####  #####   #####  ######
 * ###### ######  #####( ######  #####. ######  #####          #####  ######
 * #############  #############  #############  #############  #####  ######
 *  ############   ############  #############   ############  #####  ######
 *                                      ######
 *                               #############
 *                               ############
 * Adyen NodeJS API Library
 * Copyright (c) 2022 Adyen N.V.
 * This file is open source and available under the MIT license.
 * See the LICENSE file for more info.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nock_1 = __importDefault(require("nock"));
const base_1 = require("../__mocks__/base");
const async_1 = require("../__mocks__/terminalApi/async");
const sync_1 = require("../__mocks__/terminalApi/sync");
const terminalCloudAPI_1 = __importDefault(require("../services/terminalCloudAPI"));
const models_1 = require("../typings/terminal/models");
let client;
let terminalCloudAPI;
let scope;
beforeEach(() => {
    if (!nock_1.default.isActive()) {
        nock_1.default.activate();
    }
    client = (0, base_1.createClient)(process.env.ADYEN_TERMINAL_APIKEY);
    client.config.merchantAccount = process.env.ADYEN_TERMINAL_MERCHANT;
    terminalCloudAPI = new terminalCloudAPI_1.default(client);
    scope = (0, nock_1.default)(`${client.config.terminalApiCloudEndpoint}`);
});
afterEach(() => {
    nock_1.default.cleanAll();
});
const isCI = process.env.CI === "true" || (typeof process.env.CI === "boolean" && process.env.CI);
describe("Terminal Cloud API", () => {
    test.each([isCI])("should make an async payment request, isMock: %p", async (isMock) => {
        !isMock && nock_1.default.restore();
        scope.post("/async").reply(200, async_1.asyncRes);
        const terminalAPIPaymentRequest = (0, base_1.createTerminalAPIPaymentRequest)();
        const requestResponse = await terminalCloudAPI.async(terminalAPIPaymentRequest);
        expect(requestResponse).toEqual("ok");
    });
    test.each([isCI])("should make a sync payment request, isMock: %p", async (isMock) => {
        var _a, _b;
        !isMock && nock_1.default.restore();
        scope.post("/sync").reply(200, sync_1.syncRes);
        const terminalAPIPaymentRequest = (0, base_1.createTerminalAPIPaymentRequest)();
        const terminalAPIResponse = await terminalCloudAPI.sync(terminalAPIPaymentRequest);
        expect((_a = terminalAPIResponse.SaleToPOIResponse) === null || _a === void 0 ? void 0 : _a.PaymentResponse).toBeDefined();
        expect((_b = terminalAPIResponse.SaleToPOIResponse) === null || _b === void 0 ? void 0 : _b.MessageHeader).toBeDefined();
    });
    test.each([isCI])("should return event notification if response contains it, isMock: %p", async (isMock) => {
        var _a;
        !isMock && nock_1.default.restore();
        const terminalAPIPaymentRequest = (0, base_1.createTerminalAPIPaymentRequest)();
        scope.post("/sync").reply(200, sync_1.syncResEventNotification);
        const terminalAPIResponse = await terminalCloudAPI.sync(terminalAPIPaymentRequest);
        expect((_a = terminalAPIResponse.SaleToPOIRequest) === null || _a === void 0 ? void 0 : _a.EventNotification).toBeDefined();
    });
    test.each([isCI])("should make an async refund request, isMock: %p", async (isMock) => {
        var _a, _b;
        !isMock && nock_1.default.restore();
        scope.post("/sync").reply(200, sync_1.syncRes);
        const terminalAPIPaymentRequest = (0, base_1.createTerminalAPIPaymentRequest)();
        const terminalAPIResponse = await terminalCloudAPI.sync(terminalAPIPaymentRequest);
        const pOITransactionId = terminalAPIResponse.SaleToPOIResponse.PaymentResponse.POIData.POITransactionID;
        expect(pOITransactionId).toBeTruthy();
        scope.post("/sync").reply(200, sync_1.syncRefund);
        const terminalAPIRefundRequest = (0, base_1.createTerminalAPIRefundRequest)(pOITransactionId);
        const id = Math.floor(Math.random() * Math.floor(10000000)).toString();
        terminalAPIRefundRequest.SaleToPOIRequest.MessageHeader.ServiceID = id;
        const saleToAcquirerData = new models_1.SaleToAcquirerData();
        saleToAcquirerData.currency = "EUR";
        terminalAPIRefundRequest.SaleToPOIRequest.ReversalRequest.SaleData.SaleToAcquirerData = saleToAcquirerData;
        const terminalAPIRefundResponse = await terminalCloudAPI.sync(terminalAPIRefundRequest);
        expect((_b = (_a = terminalAPIRefundResponse.SaleToPOIResponse) === null || _a === void 0 ? void 0 : _a.ReversalResponse) === null || _b === void 0 ? void 0 : _b.Response.Result).toBe("Success");
    }, 20000);
});
//# sourceMappingURL=terminalCloudAPI.spec.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nock_1 = __importDefault(require("nock"));
const base_1 = require("../__mocks__/base");
const client_1 = __importDefault(require("../client"));
const classicIntegration_1 = __importDefault(require("../services/classicIntegration"));
const modificationResult_1 = require("../typings/payments/modificationResult");
let client;
let classicIntegration;
let scope;
beforeEach(() => {
    if (!nock_1.default.isActive()) {
        nock_1.default.activate();
    }
    client = (0, base_1.createClient)();
    scope = (0, nock_1.default)(`${client.config.paymentEndpoint}/${client_1.default.PAYMENT_API_VERSION}`);
    classicIntegration = new classicIntegration_1.default(client);
});
afterEach(() => {
    nock_1.default.cleanAll();
});
describe("Classic Integration", () => {
    test("Should authorise payment", async () => {
        scope.post("/authorise")
            .reply(200, {
            "additionalData": {
                "scaExemptionRequested": "transactionRiskAnalysis",
                "checkout.cardAddedBrand": "visa"
            },
            "pspReference": "JVBXGSDM53RZNN82",
            "resultCode": "Authorised",
            "authCode": "011381"
        });
        const paymentRequest = {
            "card": {
                "number": "4111111111111111",
                "expiryMonth": "03",
                "expiryYear": "2030",
                "cvc": "737",
                "holderName": "John Smith"
            },
            "amount": {
                "value": 1500,
                "currency": "EUR"
            },
            "reference": "YOUR_REFERENCE",
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT"
        };
        const paymentResult = await classicIntegration.authorise(paymentRequest);
        expect(paymentResult.pspReference).toEqual("JVBXGSDM53RZNN82");
    });
    test("Should complete 3DS authorisation", async () => {
        scope.post("/authorise3d")
            .reply(200, {
            "additionalData": {
                "scaExemptionRequested": "transactionRiskAnalysis",
                "checkout.cardAddedBrand": "visa"
            },
            "pspReference": "JVBXGSDM53RZNN82",
            "resultCode": "Authorised",
            "authCode": "011381"
        });
        const paymentRequest = {
            "md": "31h..........vOXek7w",
            "paResponse": "eNqtmF........wGVA4Ch",
            "shopperIP": "61.294.12.12",
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT"
        };
        const paymentResult = await classicIntegration.authorise3d(paymentRequest);
        expect(paymentResult.pspReference).toEqual("JVBXGSDM53RZNN82");
    });
    test("Should complete 3DS2 authorisation", async () => {
        scope.post("/authorise3ds2")
            .reply(200, {
            "additionalData": {
                "scaExemptionRequested": "transactionRiskAnalysis",
                "checkout.cardAddedBrand": "visa"
            },
            "pspReference": "JVBXGSDM53RZNN82",
            "resultCode": "Authorised",
            "authCode": "011381"
        });
        const paymentRequest = {
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT",
            "amount": {
                "value": 1500,
                "currency": "EUR"
            },
            "reference": "YOUR_REFERENCE",
            "threeDS2RequestData": {
                "threeDSCompInd": "Y",
                "deviceChannel": "testDeviceChannel"
            },
            "threeDS2Token": "â€” - BINARY DATA - -"
        };
        const paymentResult = await classicIntegration.authorise3ds2(paymentRequest);
        expect(paymentResult.pspReference).toEqual("JVBXGSDM53RZNN82");
    });
    test("Should get auth result after 3DS authentication", async () => {
        var _a;
        scope.post("/getAuthenticationResult").reply(200, {
            "threeDS2Result": { "authenticationValue": "THREEDS2RESULT" }
        });
        const getAuthenticationResultrequest = {
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT",
            "pspReference": "9935272408535455"
        };
        const getAuthenticationResultResponse = await classicIntegration.getAuthenticationResult(getAuthenticationResultrequest);
        expect((_a = getAuthenticationResultResponse === null || getAuthenticationResultResponse === void 0 ? void 0 : getAuthenticationResultResponse.threeDS2Result) === null || _a === void 0 ? void 0 : _a.authenticationValue).toEqual("THREEDS2RESULT");
    });
    test("Should retrieve 3DS2 result", async () => {
        var _a;
        scope.post("/retrieve3ds2Result").reply(200, {
            "threeDS2Result": { "authenticationValue": "THREEDS2RESULT" }
        });
        const retrieve3ds2ResultRequest = {
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT",
            "pspReference": "9935272408535455"
        };
        const retrieve3ds2ResultResponse = await classicIntegration.retrieve3ds2Result(retrieve3ds2ResultRequest);
        expect((_a = retrieve3ds2ResultResponse === null || retrieve3ds2ResultResponse === void 0 ? void 0 : retrieve3ds2ResultResponse.threeDS2Result) === null || _a === void 0 ? void 0 : _a.authenticationValue).toEqual("THREEDS2RESULT");
    });
    test("Should succesfully send Capture request", async () => {
        scope.post("/capture")
            .reply(200, {
            "pspReference": "YOUR_REFERENCE",
            "response": "[capture-received]"
        });
        const modificationRequest = {
            "originalReference": "COPY_PSP_REFERENCE_FROM_AUTHORISE_RESPONSE",
            "modificationAmount": {
                "value": 500,
                "currency": "EUR"
            },
            "reference": "YourModificationReference",
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT"
        };
        const modificationResult = await classicIntegration.capture(modificationRequest);
        expect(modificationResult.response).toEqual(modificationResult_1.ModificationResult.ResponseEnum.CaptureReceived);
    });
    test("Should succesfully send Cancel request", async () => {
        scope.post("/cancel")
            .reply(200, {
            "pspReference": "YOUR_REFERENCE",
            "response": "[cancel-received]"
        });
        const modificationRequest = {
            "originalReference": "COPY_PSP_REFERENCE_FROM_AUTHORISE_RESPONSE",
            "reference": "YourModificationReference",
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT"
        };
        const modificationResult = await classicIntegration.cancel(modificationRequest);
        expect(modificationResult.response).toEqual(modificationResult_1.ModificationResult.ResponseEnum.CancelReceived);
    });
    test("Should succesfully send Refund request", async () => {
        scope.post("/refund")
            .reply(200, {
            "pspReference": "YOUR_REFERENCE",
            "response": "[refund-received]"
        });
        const modificationRequest = {
            "originalReference": "COPY_PSP_REFERENCE_FROM_AUTHORISE_RESPONSE",
            "modificationAmount": {
                "value": 500,
                "currency": "EUR"
            },
            "reference": "YourModificationReference",
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT"
        };
        const modificationResult = await classicIntegration.refund(modificationRequest);
        expect(modificationResult.response).toEqual(modificationResult_1.ModificationResult.ResponseEnum.RefundReceived);
    });
    test("Should succesfully send CancelOrRefund request", async () => {
        scope.post("/cancelOrRefund")
            .reply(200, {
            "pspReference": "YOUR_REFERENCE",
            "response": "[cancelOrRefund-received]"
        });
        const modificationRequest = {
            "originalReference": "COPY_PSP_REFERENCE_FROM_AUTHORISE_RESPONSE",
            "reference": "YourModificationReference",
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT"
        };
        const modificationResult = await classicIntegration.cancelOrRefund(modificationRequest);
        expect(modificationResult.response).toEqual(modificationResult_1.ModificationResult.ResponseEnum.CancelOrRefundReceived);
    });
    test("Should succesfully send TechnicalCancel request", async () => {
        scope.post("/technicalCancel")
            .reply(200, {
            "pspReference": "YOUR_REFERENCE",
            "response": "[technical-cancel-received]"
        });
        const modificationRequest = {
            "originalMerchantReference": "COPY_PSP_REFERENCE_FROM_AUTHORISE_RESPONSE",
            "modificationAmount": {
                "value": 500,
                "currency": "EUR"
            },
            "reference": "YourModificationReference",
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT"
        };
        const modificationResult = await classicIntegration.technicalCancel(modificationRequest);
        expect(modificationResult.response).toEqual(modificationResult_1.ModificationResult.ResponseEnum.TechnicalCancelReceived);
    });
    test("Should succesfully send AdjustAuthorisation request", async () => {
        scope.post("/adjustAuthorisation")
            .reply(200, {
            "pspReference": "YOUR_REFERENCE",
            "response": "[adjustAuthorisation-received]"
        });
        const modificationRequest = {
            "originalReference": "COPY_PSP_REFERENCE_FROM_AUTHORISE_RESPONSE",
            "modificationAmount": {
                "value": 500,
                "currency": "EUR"
            },
            "reference": "YourModificationReference",
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT"
        };
        const modificationResult = await classicIntegration.adjustAuthorisation(modificationRequest);
        expect(modificationResult.response).toEqual(modificationResult_1.ModificationResult.ResponseEnum.AdjustAuthorisationReceived);
    });
    test("Should succesfully send Donate request", async () => {
        scope.post("/donate")
            .reply(200, {
            "pspReference": "YOUR_REFERENCE",
            "response": "[donation-received]"
        });
        const modificationRequest = {
            "originalReference": "COPY_PSP_REFERENCE_FROM_AUTHORISE_RESPONSE",
            "modificationAmount": {
                "value": 500,
                "currency": "EUR"
            },
            "reference": "YOUR_DONATION_REFERENCE",
            "donationAccount": "AdyenGivingDemo",
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT"
        };
        const modificationResult = await classicIntegration.donate(modificationRequest);
        expect(modificationResult.response).toEqual(modificationResult_1.ModificationResult.ResponseEnum.DonationReceived);
    });
    test("Should succesfully send VoidPendingRefund request", async () => {
        scope.post("/voidPendingRefund")
            .reply(200, {
            "pspReference": "YOUR_REFERENCE",
            "response": "[voidPendingRefund-received]"
        });
        const modificationRequest = {
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT",
            "tenderReference": "5Iw8001176969533005",
            "uniqueTerminalId": "VX820-123456789"
        };
        const modificationResult = await classicIntegration.voidPendingRefund(modificationRequest);
        expect(modificationResult.response).toEqual(modificationResult_1.ModificationResult.ResponseEnum.VoidPendingRefundReceived);
    });
});
//# sourceMappingURL=classicIntegration.spec.js.map
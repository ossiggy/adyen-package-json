"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nock_1 = __importDefault(require("nock"));
const client_1 = __importDefault(require("../client"));
const base_1 = require("../__mocks__/base");
const services_1 = require("../services");
const models_1 = require("../typings/storedValue/models");
let client;
let storedValue;
let scope;
beforeEach(() => {
    if (!nock_1.default.isActive()) {
        nock_1.default.activate();
    }
    client = (0, base_1.createClient)();
    scope = (0, nock_1.default)(`${client.config.storedValueEndpoint}/${client_1.default.STOREDVALUE_API_VERSION}`);
    storedValue = new services_1.StoredValue(client);
});
afterEach(() => {
    nock_1.default.cleanAll();
});
describe("StoredValue", () => {
    test("Should issue Givex card", async () => {
        scope.post("/issue")
            .reply(200, {
            "currentBalance": {
                "currency": "EUR",
                "value": 1000
            },
            "pspReference": "851564651069192J",
            "resultCode": "Success",
            "paymentMethod": {
                "number": "7219627091701347",
                "securityCode": "0140",
                "type": "givex"
            }
        });
        const issueRequest = {
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT",
            "store": "YOUR_STORE_ID",
            "paymentMethod": {
                "type": "givex"
            },
            "amount": {
                "currency": "EUR",
                "value": 1000
            },
            "reference": "YOUR_REFERENCE"
        };
        const issueResponse = await storedValue.issue(issueRequest);
        expect(issueResponse.pspReference).toEqual("851564651069192J");
    });
    test("Should issue virtual Fiserv card", async () => {
        scope.post("/issue")
            .reply(200, {
            "currentBalance": {
                "currency": "EUR",
                "value": 1000
            },
            "pspReference": "851564651069192J",
            "resultCode": "Success",
            "paymentMethod": {
                "number": "7219627091701347",
                "securityCode": "0140",
                "type": "givex"
            }
        });
        const issueRequest = {
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT",
            "store": "YOUR_STORE_ID",
            "paymentMethod": {
                "type": "valuelink"
            },
            // "giftCardPromoCode": "1324",
            "reference": "YOUR_REFERENCE"
        };
        const issueResponse = await storedValue.issue(issueRequest);
        expect(issueResponse.pspReference).toEqual("851564651069192J");
    });
    test("Should activate card", async () => {
        scope.post("/changeStatus")
            .reply(200, {
            "currentBalance": {
                "currency": "USD",
                "value": 1000
            },
            "pspReference": "851564652149588K",
            "resultCode": "Success"
        });
        const statusRequest = {
            "status": models_1.StoredValueStatusChangeRequest.StatusEnum.Active,
            "amount": {
                "currency": "USD",
                "value": 1000
            },
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT",
            "store": "YOUR_STORE_ID",
            "paymentMethod": {
                "type": "svs",
                "number": "6006491286999921374",
                "securityCode": "1111"
            },
            "reference": "YOUR_REFERENCE"
        };
        const changeStatusResponse = await storedValue.changeStatus(statusRequest);
        expect(changeStatusResponse.pspReference).toEqual("851564652149588K");
    });
    test("Should deactivate card", async () => {
        scope.post("/changeStatus")
            .reply(200, {
            "currentBalance": {
                "currency": "USD",
                "value": 1000
            },
            "pspReference": "851564652149588K",
            "resultCode": "Success"
        });
        const statusRequest = {
            "status": models_1.StoredValueStatusChangeRequest.StatusEnum.Inactive,
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT",
            "store": "YOUR_STORE_ID",
            "paymentMethod": {
                "type": "givex",
            },
            "recurringDetailReference": "7219627091701347",
            "shopperReference": "YOUR_UNIQUE_SHOPPER_ID_P3fW3k9D2tvXFu6l",
            "shopperInteraction": models_1.StoredValueStatusChangeRequest.ShopperInteractionEnum.Ecommerce,
            "reference": "YOUR_REFERENCE"
        };
        const changeStatusResponse = await storedValue.changeStatus(statusRequest);
        expect(changeStatusResponse.pspReference).toEqual("851564652149588K");
    });
    test("Should load funds to card", async () => {
        scope.post("/load")
            .reply(200, {
            "currentBalance": {
                "currency": "USD",
                "value": 30000
            },
            "pspReference": "851564654294247B",
            "resultCode": "Success"
        });
        const loadRequest = {
            "amount": {
                "currency": "USD",
                "value": 2000
            },
            "loadType": models_1.StoredValueLoadRequest.LoadTypeEnum.MerchandiseReturn,
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT",
            "store": "YOUR_STORE_ID",
            "paymentMethod": {
                "type": "svs",
                "number": "6006491286999921374",
                "securityCode": "1111"
            },
            "reference": "YOUR_REFERENCE"
        };
        const loadResponse = await storedValue.load(loadRequest);
        expect(loadResponse.pspReference).toEqual("851564654294247B");
    });
    test("Should check remaining balance of card", async () => {
        scope.post("/checkBalance")
            .reply(200, {
            "currentBalance": {
                "currency": "EUR",
                "value": 5600
            },
            "pspReference": "881564657480267D",
            "resultCode": "Success"
        });
        const checkBalanceRequest = {
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT",
            "store": "YOUR_STORE_ID",
            "paymentMethod": {
                "type": "svs",
                "number": "603628672882001915092",
                "securityCode": "5754"
            },
            "reference": "YOUR_REFERENCE"
        };
        const checkBalanceResponse = await storedValue.checkBalance(checkBalanceRequest);
        expect(checkBalanceResponse.pspReference).toEqual("881564657480267D");
    });
    test("Should transfer full value from one card to another", async () => {
        scope.post("/mergeBalance")
            .reply(200, {
            "currentBalance": {
                "currency": "EUR",
                "value": 5600
            },
            "pspReference": "881564657480267D",
            "resultCode": "Success"
        });
        const mergeBalanceRequest = {
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT",
            "store": "YOUR_STORE_ID",
            "sourcePaymentMethod": {
                "number": "7777182708544835",
                "securityCode": "2329"
            },
            "paymentMethod": {
                "type": "valuelink",
                "number": "8888182708544836",
                "securityCode": "2330"
            },
            "reference": "YOUR_REFERENCE"
        };
        const mergeBalanceResponse = await storedValue.mergebalance(mergeBalanceRequest);
        expect(mergeBalanceResponse.pspReference).toEqual("881564657480267D");
    });
    test("Should undo transaction on card", async () => {
        scope.post("/voidTransaction")
            .reply(200, {
            "currentBalance": {
                "currency": "EUR",
                "value": 120000
            },
            "pspReference": "851564673300692A",
            "resultCode": "Success"
        });
        const voidTransactionRequest = {
            "merchantAccount": "YOUR_MERCHANT_ACCOUNT",
            "originalReference": "851564654294247B",
            "reference": "YOUR_REFERENCE"
        };
        const voidTransactionResponse = await storedValue.voidTransaction(voidTransactionRequest);
        expect(voidTransactionResponse.pspReference).toEqual("851564673300692A");
    });
});
//# sourceMappingURL=storedValue.spec.js.map
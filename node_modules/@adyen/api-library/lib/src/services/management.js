"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const service_1 = __importDefault(require("../service"));
const meApi_1 = __importDefault(require("./management/meApi"));
const merchantAccount_1 = __importDefault(require("./management/merchantAccount"));
const merchantAllowedOrigins_1 = __importDefault(require("./management/merchantAllowedOrigins"));
const merchantApiCredentials_1 = __importDefault(require("./management/merchantApiCredentials"));
const merchantApiKey_1 = __importDefault(require("./management/merchantApiKey"));
const merchantClientKey_1 = __importDefault(require("./management/merchantClientKey"));
const merchantPaymentMethods_1 = __importDefault(require("./management/merchantPaymentMethods"));
const merchantPayoutSettings_1 = __importDefault(require("./management/merchantPayoutSettings"));
const merchantTerminalOrders_1 = __importDefault(require("./management/merchantTerminalOrders"));
const merchantTerminalSettings_1 = __importDefault(require("./management/merchantTerminalSettings"));
const merchantUsers_1 = __importDefault(require("./management/merchantUsers"));
const merchantWebhooks_1 = __importDefault(require("./management/merchantWebhooks"));
class Management extends service_1.default {
    constructor(client) {
        super(client);
    }
    get Me() {
        const meApi = new meApi_1.default(this.client);
        return meApi.Me;
    }
    get MerchantAccount() {
        return new merchantAccount_1.default(this.client);
    }
    get MerchantAllowedOrigins() {
        return new merchantAllowedOrigins_1.default(this.client);
    }
    get MerchantApiCredentials() {
        return new merchantApiCredentials_1.default(this.client);
    }
    get MerchantApiKey() {
        return new merchantApiKey_1.default(this.client);
    }
    get MerchantClientKey() {
        return new merchantClientKey_1.default(this.client);
    }
    get MerchantPaymentMethods() {
        return new merchantPaymentMethods_1.default(this.client);
    }
    get MerchantPayoutSettings() {
        return new merchantPayoutSettings_1.default(this.client);
    }
    get MerchantTerminalOrders() {
        return new merchantTerminalOrders_1.default(this.client);
    }
    get MerchantTerminalSettings() {
        return new merchantTerminalSettings_1.default(this.client);
    }
    get MerchantUsers() {
        return new merchantUsers_1.default(this.client);
    }
    get MerchantWebhooks() {
        return new merchantWebhooks_1.default(this.client);
    }
}
exports.default = Management;
//# sourceMappingURL=management.js.map
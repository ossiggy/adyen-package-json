import Service from "../service";
import Client from "../client";
import MerchantAccount from "./management/merchantAccount";
import MerchantAllowedOrigins from "./management/merchantAllowedOrigins";
import MerchantApiCredentials from "./management/merchantApiCredentials";
import MerchantApiKey from "./management/merchantApiKey";
import MerchantClientKey from "./management/merchantClientKey";
import MerchantPaymentMethods from "./management/merchantPaymentMethods";
import MerchantPayoutSettings from "./management/merchantPayoutSettings";
import MerchantTerminalOrders from "./management/merchantTerminalOrders";
import MerchantTerminalSettings from "./management/merchantTerminalSettings";
import MerchantUsers from "./management/merchantUsers";
import MerchantWebhooks from "./management/merchantWebhooks";
declare class Management extends Service {
    constructor(client: Client);
    get Me(): {
        retrieve: () => Promise<import("../typings/management/meApiCredential").MeApiCredential>;
        createAllowedOrigin: (allowedOriginRequest: import("../typings/management/createAllowedOriginRequest").CreateAllowedOriginRequest) => Promise<import("../typings/management/allowedOrigin").AllowedOrigin>;
        retrieveAllowedOrigins: () => Promise<import("../typings/management/allowedOriginsResponse").AllowedOriginsResponse>;
        retrieveAllowedOrigin: (originId: string) => Promise<import("../typings/management/allowedOrigin").AllowedOrigin>;
        deleteAllowerdOrigin: (originId: string) => Promise<Record<string, unknown>>;
    };
    get MerchantAccount(): MerchantAccount;
    get MerchantAllowedOrigins(): MerchantAllowedOrigins;
    get MerchantApiCredentials(): MerchantApiCredentials;
    get MerchantApiKey(): MerchantApiKey;
    get MerchantClientKey(): MerchantClientKey;
    get MerchantPaymentMethods(): MerchantPaymentMethods;
    get MerchantPayoutSettings(): MerchantPayoutSettings;
    get MerchantTerminalOrders(): MerchantTerminalOrders;
    get MerchantTerminalSettings(): MerchantTerminalSettings;
    get MerchantUsers(): MerchantUsers;
    get MerchantWebhooks(): MerchantWebhooks;
}
export default Management;

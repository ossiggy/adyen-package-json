import { ErrorFieldType } from './errorFieldType';
import { ExchangeMessage } from './exchangeMessage';
export declare class TestNotificationConfigurationResponse {
    /**
    * Any error messages encountered.
    */
    'errorMessages'?: Array<string>;
    /**
    * The event types that were tested. >Permitted values: `ACCOUNT_HOLDER_CREATED`, `ACCOUNT_CREATED`, `ACCOUNT_UPDATED`, `ACCOUNT_HOLDER_UPDATED`, `ACCOUNT_HOLDER_STATUS_CHANGE`, `ACCOUNT_HOLDER_STORE_STATUS_CHANGE` `ACCOUNT_HOLDER_VERIFICATION`, `ACCOUNT_HOLDER_LIMIT_REACHED`, `ACCOUNT_HOLDER_PAYOUT`, `PAYMENT_FAILURE`, `SCHEDULED_REFUNDS`, `REPORT_AVAILABLE`, `TRANSFER_FUNDS`, `BENEFICIARY_SETUP`, `COMPENSATE_NEGATIVE_BALANCE`.
    */
    'eventTypes': Array<TestNotificationConfigurationResponse.EventTypesEnum>;
    /**
    * The notification message and related response messages.
    */
    'exchangeMessages': Array<ExchangeMessage>;
    /**
    * Contains field validation errors that would prevent requests from being processed.
    */
    'invalidFields'?: Array<ErrorFieldType>;
    /**
    * The ID of the notification subscription configuration.
    */
    'notificationId': number;
    /**
    * A list of messages describing the testing steps.
    */
    'okMessages': Array<string>;
    /**
    * The reference of a request. Can be used to uniquely identify the request.
    */
    'pspReference'?: string;
    /**
    * The result code.
    */
    'resultCode'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace TestNotificationConfigurationResponse {
    enum EventTypesEnum {
        AccountClosed,
        AccountCreated,
        AccountFundsBelowThreshold,
        AccountHolderCreated,
        AccountHolderLimitReached,
        AccountHolderPayout,
        AccountHolderStatusChange,
        AccountHolderStoreStatusChange,
        AccountHolderUpcomingDeadline,
        AccountHolderUpdated,
        AccountHolderVerification,
        AccountUpdated,
        BeneficiarySetup,
        CompensateNegativeBalance,
        DirectDebitInitiated,
        PaymentFailure,
        PendingCredit,
        RefundFundsTransfer,
        ReportAvailable,
        ScheduledRefunds,
        ScoreSignalTriggered,
        TransferFunds,
        TransferNotPaidoutTransfers
    }
}

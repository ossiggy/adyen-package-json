export declare class NotificationEventConfiguration {
    /**
    * The type of event.  Possible values: **ACCOUNT_CLOSED**, **ACCOUNT_CREATED**, **ACCOUNT_FUNDS_BELOW_THRESHOLD**, **ACCOUNT_HOLDER_CREATED**, **ACCOUNT_HOLDER_LIMIT_REACHED**, **ACCOUNT_HOLDER_PAYOUT**, **ACCOUNT_HOLDER_STATUS_CHANGE**, **ACCOUNT_HOLDER_STORE_STATUS_CHANGE**, **ACCOUNT_HOLDER_UPCOMING_DEADLINE**, **ACCOUNT_HOLDER_UPDATED**, **ACCOUNT_HOLDER_VERIFICATION**, **ACCOUNT_UPDATED**, **BENEFICIARY_SETUP**, **COMPENSATE_NEGATIVE_BALANCE**, **DIRECT_DEBIT_INITIATED**, **PAYMENT_FAILURE**, **REFUND_FUNDS_TRANSFER**, **REPORT_AVAILABLE**, **SCHEDULED_REFUNDS**, **TRANSFER_FUNDS**.
    */
    'eventType': NotificationEventConfiguration.EventTypeEnum;
    /**
    * Indicates whether the specified `eventType` is sent to your webhook endpoint. Possible values: * **INCLUDE**: Send the specified `eventType`. * **EXCLUDE**: Send all event types except the specified `eventType` and other event types with the `includeMode` set to **EXCLUDE**.
    */
    'includeMode': NotificationEventConfiguration.IncludeModeEnum;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace NotificationEventConfiguration {
    enum EventTypeEnum {
        AccountClosed,
        AccountCreated,
        AccountFundsBelowThreshold,
        AccountHolderCreated,
        AccountHolderLimitReached,
        AccountHolderPayout,
        AccountHolderStatusChange,
        AccountHolderStoreStatusChange,
        AccountHolderUpcomingDeadline,
        AccountHolderUpdated,
        AccountHolderVerification,
        AccountUpdated,
        BeneficiarySetup,
        CompensateNegativeBalance,
        DirectDebitInitiated,
        PaymentFailure,
        PendingCredit,
        RefundFundsTransfer,
        ReportAvailable,
        ScheduledRefunds,
        ScoreSignalTriggered,
        TransferFunds,
        TransferNotPaidoutTransfers
    }
    enum IncludeModeEnum {
        Exclude,
        Include
    }
}

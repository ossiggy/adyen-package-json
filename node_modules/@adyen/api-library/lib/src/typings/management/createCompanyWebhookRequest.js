"use strict";
/*
 * The version of the OpenAPI document: v1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateCompanyWebhookRequest = void 0;
class CreateCompanyWebhookRequest {
    static getAttributeTypeMap() {
        return CreateCompanyWebhookRequest.attributeTypeMap;
    }
}
exports.CreateCompanyWebhookRequest = CreateCompanyWebhookRequest;
CreateCompanyWebhookRequest.discriminator = undefined;
CreateCompanyWebhookRequest.attributeTypeMap = [
    {
        "name": "acceptsExpiredCertificate",
        "baseName": "acceptsExpiredCertificate",
        "type": "boolean"
    },
    {
        "name": "acceptsSelfSignedCertificate",
        "baseName": "acceptsSelfSignedCertificate",
        "type": "boolean"
    },
    {
        "name": "acceptsUntrustedRootCertificate",
        "baseName": "acceptsUntrustedRootCertificate",
        "type": "boolean"
    },
    {
        "name": "active",
        "baseName": "active",
        "type": "boolean"
    },
    {
        "name": "additionalSettings",
        "baseName": "additionalSettings",
        "type": "AdditionalSettings"
    },
    {
        "name": "communicationFormat",
        "baseName": "communicationFormat",
        "type": "CreateCompanyWebhookRequest.CommunicationFormatEnum"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "filterMerchantAccountType",
        "baseName": "filterMerchantAccountType",
        "type": "CreateCompanyWebhookRequest.FilterMerchantAccountTypeEnum"
    },
    {
        "name": "filterMerchantAccounts",
        "baseName": "filterMerchantAccounts",
        "type": "Array<string>"
    },
    {
        "name": "networkType",
        "baseName": "networkType",
        "type": "CreateCompanyWebhookRequest.NetworkTypeEnum"
    },
    {
        "name": "password",
        "baseName": "password",
        "type": "string"
    },
    {
        "name": "populateSoapActionHeader",
        "baseName": "populateSoapActionHeader",
        "type": "boolean"
    },
    {
        "name": "sslVersion",
        "baseName": "sslVersion",
        "type": "CreateCompanyWebhookRequest.SslVersionEnum"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "url",
        "baseName": "url",
        "type": "string"
    },
    {
        "name": "username",
        "baseName": "username",
        "type": "string"
    }
];
(function (CreateCompanyWebhookRequest) {
    let CommunicationFormatEnum;
    (function (CommunicationFormatEnum) {
        CommunicationFormatEnum[CommunicationFormatEnum["Http"] = 'HTTP'] = "Http";
        CommunicationFormatEnum[CommunicationFormatEnum["Json"] = 'JSON'] = "Json";
        CommunicationFormatEnum[CommunicationFormatEnum["Soap"] = 'SOAP'] = "Soap";
    })(CommunicationFormatEnum = CreateCompanyWebhookRequest.CommunicationFormatEnum || (CreateCompanyWebhookRequest.CommunicationFormatEnum = {}));
    let FilterMerchantAccountTypeEnum;
    (function (FilterMerchantAccountTypeEnum) {
        FilterMerchantAccountTypeEnum[FilterMerchantAccountTypeEnum["ExcludeList"] = 'EXCLUDE_LIST'] = "ExcludeList";
        FilterMerchantAccountTypeEnum[FilterMerchantAccountTypeEnum["IncludeAll"] = 'INCLUDE_ALL'] = "IncludeAll";
        FilterMerchantAccountTypeEnum[FilterMerchantAccountTypeEnum["IncludeList"] = 'INCLUDE_LIST'] = "IncludeList";
    })(FilterMerchantAccountTypeEnum = CreateCompanyWebhookRequest.FilterMerchantAccountTypeEnum || (CreateCompanyWebhookRequest.FilterMerchantAccountTypeEnum = {}));
    let NetworkTypeEnum;
    (function (NetworkTypeEnum) {
        NetworkTypeEnum[NetworkTypeEnum["Local"] = 'LOCAL'] = "Local";
        NetworkTypeEnum[NetworkTypeEnum["Public"] = 'PUBLIC'] = "Public";
    })(NetworkTypeEnum = CreateCompanyWebhookRequest.NetworkTypeEnum || (CreateCompanyWebhookRequest.NetworkTypeEnum = {}));
    let SslVersionEnum;
    (function (SslVersionEnum) {
        SslVersionEnum[SslVersionEnum["Http"] = 'HTTP'] = "Http";
        SslVersionEnum[SslVersionEnum["Ssl"] = 'SSL'] = "Ssl";
        SslVersionEnum[SslVersionEnum["Sslv3"] = 'SSLV3'] = "Sslv3";
        SslVersionEnum[SslVersionEnum["SslInsecureCiphers"] = 'SSL_INSECURE_CIPHERS'] = "SslInsecureCiphers";
        SslVersionEnum[SslVersionEnum["Tls"] = 'TLS'] = "Tls";
        SslVersionEnum[SslVersionEnum["Tlsv1"] = 'TLSV1'] = "Tlsv1";
        SslVersionEnum[SslVersionEnum["Tlsv11"] = 'TLSV1_1'] = "Tlsv11";
        SslVersionEnum[SslVersionEnum["Tlsv12"] = 'TLSV1_2'] = "Tlsv12";
        SslVersionEnum[SslVersionEnum["Tlsv1InsecureCiphers"] = 'TLSV1_INSECURE_CIPHERS'] = "Tlsv1InsecureCiphers";
    })(SslVersionEnum = CreateCompanyWebhookRequest.SslVersionEnum || (CreateCompanyWebhookRequest.SslVersionEnum = {}));
})(CreateCompanyWebhookRequest = exports.CreateCompanyWebhookRequest || (exports.CreateCompanyWebhookRequest = {}));
//# sourceMappingURL=createCompanyWebhookRequest.js.map
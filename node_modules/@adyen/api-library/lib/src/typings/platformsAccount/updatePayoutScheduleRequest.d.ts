export declare class UpdatePayoutScheduleRequest {
    /**
    * Direction on how to handle any payouts that have already been scheduled. Permitted values: * `CLOSE` will close the existing batch of payouts. * `UPDATE` will reschedule the existing batch to the new schedule. * `NOTHING` (**default**) will allow the payout to proceed.
    */
    'action'?: UpdatePayoutScheduleRequest.ActionEnum;
    /**
    * The reason for the payout schedule update. > This field is required when the `schedule` parameter is set to `HOLD`.
    */
    'reason'?: string;
    /**
    * The payout schedule to which the account is to be updated. Permitted values: `DAILY`, `DAILY_US`, `DAILY_EU`, `DAILY_AU`, `DAILY_SG`, `WEEKLY`, `WEEKLY_ON_TUE_FRI_MIDNIGHT`, `BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT`, `MONTHLY`, `HOLD`. `HOLD` will prevent scheduled payouts from happening but will still allow manual payouts to occur.
    */
    'schedule': UpdatePayoutScheduleRequest.ScheduleEnum;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace UpdatePayoutScheduleRequest {
    enum ActionEnum {
        Close,
        Nothing,
        Update
    }
    enum ScheduleEnum {
        BiweeklyOn1StAnd15ThAtMidnight,
        BiweeklyOn1StAnd15ThAtNoon,
        BiDailyAu,
        BiDailyEu,
        BiDailyUs,
        Daily,
        Daily6Pm,
        DailyAu,
        DailyEu,
        DailySg,
        DailyUs,
        Default,
        Every6HoursFromMidnight,
        Hold,
        Monthly,
        MonthlyOn15ThAtMidnight,
        Weekly,
        WeeklyMonToFriAu,
        WeeklyMonToFriEu,
        WeeklyMonToFriUs,
        WeeklyOnTueFriMidnight,
        WeeklySunToThuAu,
        WeeklySunToThuUs,
        Yearly
    }
}

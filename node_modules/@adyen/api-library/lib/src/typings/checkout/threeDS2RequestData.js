"use strict";
/*
 *                       ######
 *                       ######
 * ############    ####( ######  #####. ######  ############   ############
 * #############  #####( ######  #####. ######  #############  #############
 *        ######  #####( ######  #####. ######  #####  ######  #####  ######
 * ###### ######  #####( ######  #####. ######  #####  #####   #####  ######
 * ###### ######  #####( ######  #####. ######  #####          #####  ######
 * #############  #############  #############  #############  #####  ######
 *  ############   ############  #############   ############  #####  ######
 *                                      ######
 *                               #############
 *                               ############
 * Adyen NodeJS API Library
 * Copyright (c) 2021 Adyen B.V.
 * This file is open source and available under the MIT license.
 * See the LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThreeDS2RequestData = void 0;
class ThreeDS2RequestData {
    static getAttributeTypeMap() {
        return ThreeDS2RequestData.attributeTypeMap;
    }
}
exports.ThreeDS2RequestData = ThreeDS2RequestData;
ThreeDS2RequestData.discriminator = undefined;
ThreeDS2RequestData.attributeTypeMap = [
    {
        "name": "acctInfo",
        "baseName": "acctInfo",
        "type": "AcctInfo"
    },
    {
        "name": "acctType",
        "baseName": "acctType",
        "type": "string"
    },
    {
        "name": "acquirerBIN",
        "baseName": "acquirerBIN",
        "type": "string"
    },
    {
        "name": "acquirerMerchantID",
        "baseName": "acquirerMerchantID",
        "type": "string"
    },
    {
        "name": "addrMatch",
        "baseName": "addrMatch",
        "type": "string"
    },
    {
        "name": "authenticationOnly",
        "baseName": "authenticationOnly",
        "type": "boolean"
    },
    {
        "name": "challengeIndicator",
        "baseName": "challengeIndicator",
        "type": "ThreeDS2RequestData.ChallengeIndicatorEnum"
    },
    {
        "name": "deviceChannel",
        "baseName": "deviceChannel",
        "type": "string"
    },
    {
        "name": "deviceRenderOptions",
        "baseName": "deviceRenderOptions",
        "type": "DeviceRenderOptions"
    },
    {
        "name": "homePhone",
        "baseName": "homePhone",
        "type": "Phone"
    },
    {
        "name": "mcc",
        "baseName": "mcc",
        "type": "string"
    },
    {
        "name": "merchantName",
        "baseName": "merchantName",
        "type": "string"
    },
    {
        "name": "messageVersion",
        "baseName": "messageVersion",
        "type": "string"
    },
    {
        "name": "mobilePhone",
        "baseName": "mobilePhone",
        "type": "Phone"
    },
    {
        "name": "notificationURL",
        "baseName": "notificationURL",
        "type": "string"
    },
    {
        "name": "payTokenInd",
        "baseName": "payTokenInd",
        "type": "boolean"
    },
    {
        "name": "paymentAuthenticationUseCase",
        "baseName": "paymentAuthenticationUseCase",
        "type": "string"
    },
    {
        "name": "purchaseInstalData",
        "baseName": "purchaseInstalData",
        "type": "string"
    },
    {
        "name": "recurringExpiry",
        "baseName": "recurringExpiry",
        "type": "string"
    },
    {
        "name": "recurringFrequency",
        "baseName": "recurringFrequency",
        "type": "string"
    },
    {
        "name": "sdkAppID",
        "baseName": "sdkAppID",
        "type": "string"
    },
    {
        "name": "sdkEncData",
        "baseName": "sdkEncData",
        "type": "string"
    },
    {
        "name": "sdkEphemPubKey",
        "baseName": "sdkEphemPubKey",
        "type": "SDKEphemPubKey"
    },
    {
        "name": "sdkMaxTimeout",
        "baseName": "sdkMaxTimeout",
        "type": "number"
    },
    {
        "name": "sdkReferenceNumber",
        "baseName": "sdkReferenceNumber",
        "type": "string"
    },
    {
        "name": "sdkTransID",
        "baseName": "sdkTransID",
        "type": "string"
    },
    {
        "name": "sdkVersion",
        "baseName": "sdkVersion",
        "type": "string"
    },
    {
        "name": "threeDSCompInd",
        "baseName": "threeDSCompInd",
        "type": "string"
    },
    {
        "name": "threeDSRequestorAuthenticationInd",
        "baseName": "threeDSRequestorAuthenticationInd",
        "type": "string"
    },
    {
        "name": "threeDSRequestorAuthenticationInfo",
        "baseName": "threeDSRequestorAuthenticationInfo",
        "type": "ThreeDSRequestorAuthenticationInfo"
    },
    {
        "name": "threeDSRequestorChallengeInd",
        "baseName": "threeDSRequestorChallengeInd",
        "type": "string"
    },
    {
        "name": "threeDSRequestorID",
        "baseName": "threeDSRequestorID",
        "type": "string"
    },
    {
        "name": "threeDSRequestorName",
        "baseName": "threeDSRequestorName",
        "type": "string"
    },
    {
        "name": "threeDSRequestorPriorAuthenticationInfo",
        "baseName": "threeDSRequestorPriorAuthenticationInfo",
        "type": "ThreeDSRequestorPriorAuthenticationInfo"
    },
    {
        "name": "threeDSRequestorURL",
        "baseName": "threeDSRequestorURL",
        "type": "string"
    },
    {
        "name": "transType",
        "baseName": "transType",
        "type": "string"
    },
    {
        "name": "transactionType",
        "baseName": "transactionType",
        "type": "ThreeDS2RequestData.TransactionTypeEnum"
    },
    {
        "name": "whiteListStatus",
        "baseName": "whiteListStatus",
        "type": "string"
    },
    {
        "name": "workPhone",
        "baseName": "workPhone",
        "type": "Phone"
    }
];
(function (ThreeDS2RequestData) {
    let ChallengeIndicatorEnum;
    (function (ChallengeIndicatorEnum) {
        ChallengeIndicatorEnum[ChallengeIndicatorEnum["NoPreference"] = 'noPreference'] = "NoPreference";
        ChallengeIndicatorEnum[ChallengeIndicatorEnum["RequestNoChallenge"] = 'requestNoChallenge'] = "RequestNoChallenge";
        ChallengeIndicatorEnum[ChallengeIndicatorEnum["RequestChallenge"] = 'requestChallenge'] = "RequestChallenge";
        ChallengeIndicatorEnum[ChallengeIndicatorEnum["RequestChallengeAsMandate"] = 'requestChallengeAsMandate'] = "RequestChallengeAsMandate";
    })(ChallengeIndicatorEnum = ThreeDS2RequestData.ChallengeIndicatorEnum || (ThreeDS2RequestData.ChallengeIndicatorEnum = {}));
    let TransactionTypeEnum;
    (function (TransactionTypeEnum) {
        TransactionTypeEnum[TransactionTypeEnum["GoodsOrServicePurchase"] = 'goodsOrServicePurchase'] = "GoodsOrServicePurchase";
        TransactionTypeEnum[TransactionTypeEnum["CheckAcceptance"] = 'checkAcceptance'] = "CheckAcceptance";
        TransactionTypeEnum[TransactionTypeEnum["AccountFunding"] = 'accountFunding'] = "AccountFunding";
        TransactionTypeEnum[TransactionTypeEnum["QuasiCashTransaction"] = 'quasiCashTransaction'] = "QuasiCashTransaction";
        TransactionTypeEnum[TransactionTypeEnum["PrepaidActivationAndLoad"] = 'prepaidActivationAndLoad'] = "PrepaidActivationAndLoad";
    })(TransactionTypeEnum = ThreeDS2RequestData.TransactionTypeEnum || (ThreeDS2RequestData.TransactionTypeEnum = {}));
})(ThreeDS2RequestData = exports.ThreeDS2RequestData || (exports.ThreeDS2RequestData = {}));
//# sourceMappingURL=threeDS2RequestData.js.map